# Generated by Django 3.2.7 on 2021-12-05 02:10

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import prob.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ContentImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.SmallIntegerField()),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('content', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to='prob.content')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_prob.problem_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='MultipleChoiceProblem',
            fields=[
                ('problem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='prob.problem')),
                ('solution', models.CharField(max_length=30)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('prob.problem',),
        ),
        migrations.CreateModel(
            name='SubjectiveProblem',
            fields=[
                ('problem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='prob.problem')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('prob.problem',),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to='prob.user')),
                ('introduction', models.TextField(blank=True, default='')),
            ],
        ),
        migrations.CreateModel(
            name='UserStatistics',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='statistics', serialize=False, to='prob.user')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('last_login_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('level', models.PositiveSmallIntegerField()),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='prob.tag')),
            ],
        ),
        migrations.CreateModel(
            name='ProblemSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='default title', max_length=100)),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('modified_time', models.DateTimeField(auto_now=True)),
                ('is_open', models.BooleanField(default=False)),
                ('difficulty', models.SmallIntegerField(default=0)),
                ('description', models.TextField(default='default content', max_length=1000)),
                ('tags', models.ManyToManyField(blank=True, related_name='problem_sets', to='prob.Tag')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_problem_sets', to='prob.userstatistics')),
                ('recommenders', models.ManyToManyField(blank=True, related_name='recommended_problem_sets', to='prob.UserStatistics')),
            ],
        ),
        migrations.AddField(
            model_name='problem',
            name='problem_set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problems', to='prob.problemset'),
        ),
        migrations.CreateModel(
            name='SubjectiveProblemSolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solutions', to='prob.subjectiveproblem')),
            ],
        ),
        migrations.CreateModel(
            name='Solved',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.BooleanField(default=False)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prob.problem')),
                ('solver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solved_problems', to='prob.userstatistics')),
            ],
        ),
        migrations.CreateModel(
            name='ProblemSetComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now=True)),
                ('content', models.TextField(default='default content', max_length=1000)),
                ('problem_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='prob.problemset')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_comments', to='prob.userstatistics')),
            ],
        ),
        migrations.AddField(
            model_name='problem',
            name='creator',
            field=models.ForeignKey(on_delete=models.SET(prob.models.get_sentinel_user_statistics), related_name='created_problems', to='prob.userstatistics'),
        ),
        migrations.AddField(
            model_name='problem',
            name='solvers',
            field=models.ManyToManyField(through='prob.Solved', to='prob.UserStatistics'),
        ),
        migrations.CreateModel(
            name='MultipleChoiceProblemChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.SmallIntegerField()),
                ('is_solution', models.BooleanField()),
                ('content', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to='prob.content')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='prob.multiplechoiceproblem')),
            ],
        ),
    ]
